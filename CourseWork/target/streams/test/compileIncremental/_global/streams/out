[0m[[0m[0mdebug[0m] [0m[0mThe lab1.Animal$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lab1.Animal$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lab1.Animal$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of lab1test.AnimalTest. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe lab1.Animal has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) lab1.Animal: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) lab1.Animal.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of lab1test.AnimalTest. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/AdtsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/RecursiveFunctionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/FunctionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/StringTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/SequenceTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/RecursiveDataTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/AnimalTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/MapsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/CompositionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/PatternMatchingTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/HigherOrderTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab3test/AdtsTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab3test/SequenceTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab2test/RecursiveDataTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab3test/StringTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab1test/HigherOrderTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab1test/FunctionsTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/MainTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab2test/CompositionsTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab3test/MapsTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab2test/RecursiveFunctionsTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab1test/PatternMatchingTest.class, /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes/lab1test/AnimalTest.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(lab1.Animal$,ModifiedNames(changes = UsedName(finalize,[Default]))), NamesChange(lab1.Animal,ModifiedNames(changes = UsedName(finalize,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set(/home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/classes, /home/chameleon/Project/MTUSI/FP/CourseWork/Lab_2/target/scala-2.13/classes, /home/chameleon/Project/MTUSI/FP/CourseWork/Lab_3/target/scala-2.13/classes, /home/chameleon/Project/MTUSI/FP/CourseWork/Lab_1/target/scala-2.13/classes, /home/chameleon/Project/MTUSI/FP/CourseWork/Lab_4/target/scala-2.13/classes)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(lab2test.RecursiveFunctionsTest, lab2test.RecursiveDataTest, lab1test.HigherOrderTest, lab3test.SequenceTest, lab2test.CompositionsTest, lab3test.MapsTest, lab3test.AdtsTest, lab1test.FunctionsTest, lab3test.StringTest, lab1test.AnimalTest, lab1test.PatternMatchingTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/MainTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/AdtsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/RecursiveFunctionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/FunctionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/StringTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/SequenceTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/RecursiveDataTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/AnimalTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/MapsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/CompositionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/PatternMatchingTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/HigherOrderTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(lab2test.RecursiveFunctionsTest, lab2test.RecursiveDataTest, lab1test.HigherOrderTest, lab3test.SequenceTest, lab2test.CompositionsTest, lab3test.MapsTest, lab3test.AdtsTest, lab1test.FunctionsTest, lab3test.StringTest, lab1test.AnimalTest, lab1test.PatternMatchingTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/MainTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/AdtsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/RecursiveFunctionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/FunctionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/StringTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/SequenceTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/RecursiveDataTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/AnimalTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab3test/MapsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab2test/CompositionsTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/PatternMatchingTest.scala, /home/chameleon/Project/MTUSI/FP/CourseWork/src/test/scala/lab1test/HigherOrderTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab2test.RecursiveFunctionsTest, lab2test.RecursiveDataTest, lab1test.HigherOrderTest, lab3test.SequenceTest, lab2test.CompositionsTest, lab3test.MapsTest, lab3test.AdtsTest, lab1test.FunctionsTest, lab3test.StringTest, lab1test.AnimalTest, lab1test.PatternMatchingTest[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to /home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.3.5:compile for Scala 2.13.2[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.3.5:compile for Scala 2.13.2[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 58a4c35 for Scala compiler version 2.13.2[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/chameleon/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.2/scala-library-2.13.2.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/test-classes:/home/chameleon/Project/MTUSI/FP/CourseWork/target/scala-2.13/classes:/home/chameleon/Project/MTUSI/FP/CourseWork/Lab_1/target/scala-2.13/classes:/home/chameleon/Project/MTUSI/FP/CourseWork/Lab_2/target/scala-2.13/classes:/home/chameleon/Project/MTUSI/FP/CourseWork/Lab_3/target/scala-2.13/classes:/home/chameleon/Project/MTUSI/FP/CourseWork/Lab_4/target/scala-2.13/classes:/home/chameleon/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest_2.13/3.0.8/scalatest_2.13-3.0.8.jar:/home/chameleon/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalactic/scalactic_2.13/3.0.8/scalactic_2.13-3.0.8.jar:/home/chameleon/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.13.2/scala-reflect-2.13.2.jar:/home/chameleon/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.13/1.2.0/scala-xml_2.13-1.2.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 0.974452919 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab1test.PatternMatchingTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab1test.PatternMatchingTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab1test.PatternMatchingTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab1test.PatternMatchingTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(lab1test;PatternMatchingTest;init;,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(PatternMatchingTest,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab1test.PatternMatchingTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab1test.PatternMatchingTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab2test.CompositionsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab2test.CompositionsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab2test.CompositionsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab2test.CompositionsTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(lab2test;CompositionsTest;init;,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(CompositionsTest,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab2test.CompositionsTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab2test.CompositionsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab2test.RecursiveDataTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab2test.RecursiveDataTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab2test.RecursiveDataTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab2test.RecursiveDataTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(lab2test;RecursiveDataTest;init;,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(RecursiveDataTest,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(spanScaleFactor,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(patienceConfig,[Implicit]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(interval,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(eventually,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(timeout,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(scaled,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(PatienceConfig,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab2test.RecursiveDataTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(patienceConfig,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab2test.RecursiveDataTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab3test.AdtsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab3test.AdtsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab3test.AdtsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab3test.AdtsTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(AdtsTest,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(lab3test;AdtsTest;init;,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab3test.AdtsTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab3test.AdtsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab3test.MapsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab3test.MapsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab3test.MapsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab3test.MapsTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(lab3test;MapsTest;init;,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(MapsTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab3test.MapsTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab3test.MapsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab1test.AnimalTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab1test.AnimalTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab1test.AnimalTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab1test.AnimalTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(lab1test;AnimalTest;init;,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(AnimalTest,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab1test.AnimalTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab1test.AnimalTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab3test.SequenceTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab3test.SequenceTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab3test.SequenceTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab3test.SequenceTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(SequenceTest,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(lab3test;SequenceTest;init;,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab3test.SequenceTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab3test.SequenceTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab1test.FunctionsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab1test.FunctionsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab1test.FunctionsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab1test.FunctionsTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(FunctionsTest,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(lab1test;FunctionsTest;init;,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab1test.FunctionsTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab1test.FunctionsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab2test.RecursiveFunctionsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab2test.RecursiveFunctionsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab2test.RecursiveFunctionsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab2test.RecursiveFunctionsTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(RecursiveFunctionsTest,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(lab2test;RecursiveFunctionsTest;init;,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab2test.RecursiveFunctionsTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab2test.RecursiveFunctionsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab1test.HigherOrderTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab1test.HigherOrderTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab1test.HigherOrderTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab1test.HigherOrderTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(HigherOrderTest,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(lab1test;HigherOrderTest;init;,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab1test.HigherOrderTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab1test.HigherOrderTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from lab3test.StringTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: lab3test.StringTest[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(lab3test.StringTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(lab3test.StringTest,ModifiedNames(changes = UsedName(value,[Default]), UsedName(NoArgTest,[Default]), UsedName(finalize,[Default]), UsedName(atLeast,[Default]), UsedName(run,[Default]), UsedName(AnWord,[Default]), UsedName(be,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(note,[Default]), UsedName(execute$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(KeyWord,[Default]), UsedName(an,[Default]), UsedName(styleName,[Default]), UsedName(suiteId,[Default]), UsedName(execute$default$4,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(exist,[Default]), UsedName(of,[Default]), UsedName(>=,[Default]), UsedName(have,[Default]), UsedName(every,[Default]), UsedName(sorted,[Default]), UsedName(endWith,[Default]), UsedName(notify,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(determined,[Default]), UsedName(empty,[Default]), UsedName(!=,[Default]), UsedName(info,[Default]), UsedName(DeterminedWord,[Default]), UsedName(##,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(contain,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(lab3test;StringTest;init;,[Default]), UsedName(equal,[Default]), UsedName(runNestedSuites,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(all,[Default]), UsedName(fullyMatch,[Default]), UsedName(only,[Default]), UsedName(!==,[Default]), UsedName(noElementsOf,[Default]), UsedName(allElementsOf,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(==,[Default]), UsedName(DecidedWord,[Default]), UsedName(matchPattern,[Default]), UsedName(regex,[Default]), UsedName(markup,[Default]), UsedName(typeCheck,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(testNames,[Default]), UsedName(test,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(testsFor,[Default]), UsedName($asInstanceOf,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(fail,[Default]), UsedName(writable,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(getClass,[Default]), UsedName(StringTest,[Default]), UsedName(withFixture,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(allOf,[Default]), UsedName(atMost,[Default]), UsedName(key,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(length,[Default]), UsedName(exactly,[Default]), UsedName(trap,[Default]), UsedName(inOrder,[Default]), UsedName(inOrderOnly,[Default]), UsedName(execute$default$7,[Default]), UsedName(the,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ignore,[Default]), UsedName(TheAfterWord,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(definedAt,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(assume,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(alert,[Default]), UsedName(succeed,[Default]), UsedName(runTest,[Default]), UsedName(oneElementOf,[Default]), UsedName(RegexWrapper,[Default]), UsedName(decided,[Default]), UsedName(atMostOneOf,[Default]), UsedName(defaultEquality,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(execute,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(hashCode,[Default]), UsedName(not,[Default]), UsedName(rerunner,[Default]), UsedName(noException,[Default]), UsedName(a,[Default]), UsedName(RegexWord,[Default]), UsedName(assertionsHelper,[Default]), UsedName(oneOf,[Default]), UsedName(doCollected,[Default]), UsedName(between,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(===,[Default]), UsedName(assertTypeError,[Default]), UsedName(wait,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(pending,[Default]), UsedName(include,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName($init$,[Default]), UsedName(readable,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(eq,[Default]), UsedName(registerTest,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(equals,[Default]), UsedName(assertCompiles,[Default]), UsedName(assertThrows,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(testDataFor,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(startWith,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(after,[Default]), UsedName(message,[Default]), UsedName(no,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(compile,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(ValueWord,[Default]), UsedName(suiteName,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(thrownBy,[Default]), UsedName(expectedTestCount,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(runTests,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(cancel,[Default]), UsedName(defined,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(toString,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(noneOf,[Default]), UsedName(size,[Default]), UsedName(execute$default$1,[Default]), UsedName(clone,[Default]), UsedName(AssertionsHelper,[Default]), UsedName(tags,[Default]), UsedName(Equalizer,[Default]), UsedName(>,[Default]), UsedName(<=,[Default]), UsedName(AWord,[Default]), UsedName(ne,[Default]), UsedName(execute$default$5,[Default]), UsedName(execute$default$6,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(withClue,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(assert,[Default]), UsedName(asInstanceOf,[Default]), UsedName(intercept,[Default]))) invalidates 1 classes due to The lab3test.StringTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(lab3test.StringTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
